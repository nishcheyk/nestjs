import type { NodeClass } from '../../shadow/npm/arborist/types.mts';
import type { CResult } from '../../types.mts';
import type { EnvDetails } from '../../utils/package-environment.mts';
import type { RangeStyle } from '../../utils/semver.mts';
import type { AlertsByPurl } from '../../utils/socket-package-alert.mts';
import type { EditablePackageJson, Packument } from '@socketsecurity/registry/lib/packages';
import type { Spinner } from '@socketsecurity/registry/lib/spinner';
export type FixConfig = {
    autoMerge: boolean;
    cwd: string;
    ghsas: string[];
    limit: number;
    minSatisfying: boolean;
    orgSlug: string;
    prCheck: boolean;
    purls: string[];
    rangeStyle: RangeStyle;
    spinner: Spinner | undefined;
    test: boolean;
    testScript: string;
    unknownFlags: string[];
};
export type InstallOptions = {
    args?: string[] | undefined;
    cwd?: string | undefined;
    spinner?: Spinner | undefined;
};
export type InstallPhaseHandler = (editablePkgJson: EditablePackageJson, packument: Packument, oldVersion: string, newVersion: string, vulnerableVersionRange: string, fixConfig: FixConfig) => Promise<void>;
export type Installer = (pkgEnvDetails: EnvDetails, options: InstallOptions) => Promise<NodeClass | null>;
export declare function agentFix(pkgEnvDetails: EnvDetails, actualTree: NodeClass | undefined, alertsMap: AlertsByPurl, installer: Installer, { afterInstall, afterUpdate, beforeInstall, revertInstall }: {
    beforeInstall?: InstallPhaseHandler | undefined;
    afterUpdate?: InstallPhaseHandler | undefined;
    afterInstall?: InstallPhaseHandler | undefined;
    revertInstall?: InstallPhaseHandler | undefined;
}, fixConfig: FixConfig): Promise<CResult<{
    fixed: boolean;
}>>;
//# sourceMappingURL=agent-fix.d.mts.map