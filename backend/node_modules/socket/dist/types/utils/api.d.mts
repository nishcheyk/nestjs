import type { CResult } from '../types.mts';
import type { Spinner } from '@socketsecurity/registry/lib/spinner';
import type { SocketSdkOperations, SocketSdkResult, SocketSdkSuccessResult } from '@socketsecurity/sdk';
// TODO: this function is removed after v1.0.0
export declare function handleUnsuccessfulApiResponse<T extends SocketSdkOperations>(_name: T, error: string, cause: string, status: number): never;
export type HandleApiCallOptions = {
    desc?: string | undefined;
    spinner?: Spinner | undefined;
};
export declare function handleApiCall<T extends SocketSdkOperations>(value: Promise<SocketSdkResult<T>>, options?: HandleApiCallOptions | undefined): Promise<CResult<SocketSdkSuccessResult<T>['data']>>;
export declare function handleApiCallNoSpinner<T extends SocketSdkOperations>(value: Promise<SocketSdkResult<T>>, description: string): Promise<CResult<SocketSdkSuccessResult<T>['data']>>;
export declare function getErrorMessageForHttpStatusCode(code: number): Promise<string>;
// The API server that should be used for operations.
export declare function getDefaultApiBaseUrl(): string | undefined;
export declare function queryApi(path: string, apiToken: string): Promise<Response>;
export declare function queryApiSafeText(path: string, fetchSpinnerDesc?: string): Promise<CResult<string>>;
export declare function queryApiSafeJson<T>(path: string, fetchSpinnerDesc?: string): Promise<CResult<T>>;
//# sourceMappingURL=api.d.mts.map